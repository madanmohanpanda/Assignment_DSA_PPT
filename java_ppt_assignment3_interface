/*Q1.1. Write a program to show Interface Example in java?

    // Define an interface
interface Vehicle {
    void start();
    void stop();
}

// Implement the interface in a class
class Car implements Vehicle {
 
    public void start() {
        System.out.println("Car started.");
    }

    public void stop() {
        System.out.println("Car stopped.");
    }
}

public class InterfaceExample {
    public static void main(String[] args) {
        // Create objects of classes implementing the interface
        Car car = new Car();
        // Call the interface methods on the objects
        car.start();
        car.stop();

    }
}


Q2.Write a program a Program with 2 concrete method and 2 abstract method in java ?

    abstract class Shape {
    abstract void draw();
    abstract double calculateArea();

    void display() {
        System.out.println("This is a shape.");
    }

    void printArea() {
        double area = calculateArea();
        System.out.println("Area: " + area);
    }
}

class Circle extends Shape {
    double radius;

    Circle(double radius) {
        this.radius = radius;
    }

    void draw() {
        System.out.println("Drawing a circle.");
    }

    double calculateArea() {
        return Math.PI * radius * radius;
    }
}


public class AbstractExample {
    public static void main(String[] args) {
        Circle circle = new Circle(5);
        circle.draw();
        circle.display();
        circle.printArea();

    }
}

Q3.Write a program  to show the use of functional interface in java?

    // Functional interface

interface Calculator {
    int calculate(int a, int b);
}

public class FunctionalInterfaceExample {
    public static void main(String[] args) {
        // Lambda expression using the functional interface
        Calculator addition = (a, b) -> a + b;
        int result1 = addition.calculate(5, 3);
        System.out.println("Addition: " + result1);

        // Lambda expression using the functional interface
        Calculator subtraction = (a, b) -> a - b;
        int result2 = subtraction.calculate(8, 4);
        System.out.println("Subtraction: " + result2);
    }
}


Q4. What is interface in java?

An interface in Java is a blueprint for a class. It defines a set of methods that a class implementing the 
interface must provide. Interfaces can also include constants and default method implementations. Multiple 
interfaces can be implemented by a single class, enabling multiple inheritance of behavior. Interfaces enable 
abstraction, allowing for the creation of loosely coupled code and promoting code reusability.

Q5.What is the use of interface in Java?
    Java can achive multiple inheritance by using interface.

Q6.What is the lambda expression of Java 8?
    It is used to write the functional expression of interface 
    it provides the simper way to use of a interface abstract method without implwmwnting it.

    ex.
        interface MathOperation {
            int operate(int a, int b);
        }

public class LambdaExample {
    public static void main(String[] args) {
       
        MathOperation addition = (a, b) -> a + b;
        System.out.println("Addition: " + addition.operate(5, 3));

        // Lambda expression for subtraction
        MathOperation subtraction = (a, b) -> a - b;
        System.out.println("Subtraction: " + subtraction.operate(8, 4));
    }
}

Q7.Can you pass lambda expressions to a method? When?
    interface StringManipulator {
    String manipulate(String input);
}

class TextProcessor {
    void processText(String input, StringManipulator manipulator) {
        String result = manipulator.manipulate(input);
        System.out.println("Result: " + result);
    }
}

public class LambdaPassingExample {
    public static void main(String[] args) {
        TextProcessor processor = new TextProcessor();

        // Pass a lambda expression to the processText() method
        processor.processText("Hello, World!", (text) -> text.toUpperCase());

        // Pass a different lambda expression to the processText() method
        processor.processText("Java is fun!", (text) -> text.substring(0, 4));
    }
}
Q8.What is the functional interface in Java 8?

In Java 8, a functional interface is an interface that contains exactly one abstract method. Functional interfaces 
serve as the foundation for lambda expressions and method references, enabling functional programming in Java. 
They provide a way to represent single-action behaviors and can be used as types for lambda expressions and method 
references. Functional interfaces are identified by the `@FunctionalInterface` annotation, which helps to enforce 
the single abstract method constraint and provides clarity about their purpose. Functional interfaces can have 
default methods and static methods as well, but they must have only one abstract method to be considered 
functional interfaces.

Q9.What is the benefit of lambda expressions in Java 8?
    The benefits of lambda expressions in Java 8 can be summarized as follows:

1. Concise and readable code.
2. Support for functional programming paradigms.
3. Enablement of functional interfaces.
4. Improved APIs and libraries.
5. Enhanced concurrency capabilities.

Q10.Is it mandatory for a lambda expression to have parameters?
    
    No, it is not mandatory for a lambda expression to have parameters. Lambda expressions can be parameterless if 
    the target functional interface expects no arguments. The absence of parameters is denoted by empty 
    parentheses `()`. However, the arrow operator `->` is still required to separate the parameter list from the 
    body of the lambda expression. So, lambda expressions can be both parameterless and parameterized based on the 
    requirements of the functional interface they are implementing.
  */
