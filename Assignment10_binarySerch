Q1.
    /*Given a 1-indexed array of integers numbers that are already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.
    Return the indices of the two numbers, index1, and index2, added by one as an integer array [index1, index2] of length 2.
    */

    class Solution {
        public static int[] findSum(int[] nums, int target){
            int n = nums.length;
            if(n<1)
                return new int[]{-1,-1};
            if(nums[0]+nums[1] > target)
                return new int[]{-1,-1};
            
            for(int i=0;i<n-1;i++)
            {
                for(int j=i+1;j<n;j++)
                {
                    if(nums[i]+nums[j]==target)
                    {
                        return new int[]{i+1,j+1};
                    }
                }
            }
            return new int[]{-1,-1};
            
        }
        public static void main(String... args){
            int [] arr = {5,7,7,8,8,10};
            int target  = 12;
            int [] sol = findsum(arr, target);

            for(int i:sol)
            {
                System.out.print(i+" ");
            }
        }
    }

Q2.
    Given an array of integer nums sorted in non-decreasing order, find the starting and ending position of a 
    given target value.
    If the target is not found in the array, return [-1, -1].

    class Solution {
    public int[] searchRange(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int ans[]=new int[2];
        ans[0]=searchFirst(nums,target);
        ans[1]=searchLast(nums,target);
        return ans;
    }

    public int searchFirst(int[] nums, int target){
        int low=0;
        int high=nums.length-1;
        int res=-1;
        while(low<=high){
            int mid=(low+(high-low)/2);
            
            if(nums[mid]==target){
                res=mid;
                high=mid-1;
            }
            
            else if(target>nums[mid]){             
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return res;
    }

    public int searchLast(int[] nums, int target){
        int low=0;
        int high=nums.length-1;
        int res=-1;
        while(low<=high){
            int mid=(low+(high-low)/2);
            
            if(nums[mid]==target){
                res=mid;
                low=mid+1;
            }
            
            else if(target>nums[mid]){             
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return res;
    }
}

Q3.  A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. 
If the array contains multiple peaks, return the index to any of the peaks.
    class Solution {
    public int findPeakElement(int[] nums) {
        int l=0;
        int h= nums.length-1;
        if(l==h) return l;
        if(nums[l]>nums[l+1]) return l;
        if(nums[h] > nums[h-1]) return h;
        l++ ; h--;


        while(l<=h)
        {
            int mid= l+(h-l)/2;

            if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1])
            {
                return mid;
            }else if(nums[mid-1]>nums[mid])
            {
                h = mid-1;
            }
            else{
                l = mid+1;
            }

        }
        return -1;
    }
}


Q4. 
    Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, 
    return the index where it would be if it were inserted in order.

    class Solution {
    public int serch(int[] nums, int low, int high, int target){
        int mid =low + (high-low)/2;


        if(low<=high){
            mid = low + (high-low)/2;

            if(nums[mid]==target)
            {
                return mid;
            }else if(nums[mid]> target){
                return serch(nums, low, mid-1, target );
            }
            else{
                return serch(nums, mid+1 , high, target);
            }
            
        }
        return mid;
    }
    public int searchInsert(int[] nums, int target)
        {
            int low = 0;
            int high = nums.length -1;
            int index = serch(nums,low, high, target );

            return index;
        }
    
}

Q5. Find the majority element in the array. A majority element in an array A[] of size n is an 
element that appears more than n/2 times (and hence there is at most one such element). 
    class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int candidate = nums[0];

        for(int i=0;i<nums.length;i++)
        {
            if(count == 0) 
                candidate = nums[i];
            if(candidate == nums[i])
                count ++;
            else
                count --;
            
        }
        if(count>0)
            return candidate;
        return -1;
    }
}

Q6. You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails 
the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
    public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
    int left = 1;
    int right = n;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (isBadVersion(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
    }
}

Q7.Given an array of integers, find the inversion of an array. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.

    public class InversionCount {

    public static int countInversions(int[] arr) {
        return mergeSort(arr, 0, arr.length - 1);
    }

    private static int mergeSort(int[] arr, int left, int right) {
        int count = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            // Recursive calls to divide the array
            count += mergeSort(arr, left, mid);
            count += mergeSort(arr, mid + 1, right);

            // Merge the divided arrays
            count += merge(arr, left, mid, right);
        }
        return count;
    }

    private static int merge(int[] arr, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];
        int i = left;
        int j = mid + 1;
        int k = 0;
        int count = 0;

        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                count += (mid - i + 1);
            }
        }

        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        while (j <= right) {
            temp[k++] = arr[j++];
        }

        // Copy elements from temp back to arr
        for (int p = 0; p < temp.length; p++) {
            arr[left + p] = temp[p];
        }

        return count;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2, 5, 4};
        int inversionCount = countInversions(arr);
        System.out.println("Inversion count: " + inversionCount);
    }
}


Q8.
    Given three arrays sorted in non-decreasing order, print all common elements in these arrays

    public class CommonElements {

    public static void printCommonElements(int[] arr1, int[] arr2, int[] arr3) {
        int i = 0, j = 0, k = 0;

        while (i < arr1.length && j < arr2.length && k < arr3.length) {
            // If the current elements in all arrays are equal
            if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
                System.out.print(arr1[i] + " ");
                i++;
                j++;
                k++;
            }
            // If the current element in arr1 is smaller
            else if (arr1[i] < arr2[j]) {
                i++;
            }
            // If the current element in arr2 is smaller
            else if (arr2[j] < arr3[k]) {
                j++;
            }
            // If the current element in arr3 is smaller
            else {
                k++;
            }
        }
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 5, 10, 20, 40, 80};
        int[] arr2 = {6, 7, 20, 80, 100};
        int[] arr3 = {3, 4, 15, 20, 30, 70, 80, 120};

        System.out.println("Common elements: ");
        printCommonElements(arr1, arr2, arr3);
    }
}




